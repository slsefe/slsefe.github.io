<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用 Docker 安装 MySQL8</title>
    <link href="/2023/09/23/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL8/"/>
    <url>/2023/09/23/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85MySQL8/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Docker-安装-MySQL8"><a href="#使用-Docker-安装-MySQL8" class="headerlink" title="使用 Docker 安装 MySQL8"></a>使用 Docker 安装 MySQL8</h1><p>可以在 docker hub搜索可用的 mysql 版本：<a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><p>假设我们选择8.1.0版本，就可以使用如下命令基于mysql:8.1.0来启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql8.1 \<br>-p 3306:3306 \<br>-e MYSQL_ROOT_PASSWORD=password \<br>-d mysql:8.1.0<br></code></pre></td></tr></table></figure><p>参数解析：</p><ul><li><code>--name mysql8.1</code>指定启动的容器名称，必须指定</li><li><code>-p 3306:3306</code>将容器的 3306 端口暴露给主机的 3306 端口</li><li><code>-e</code>用来指定环境变量 </li><li><code>-d</code>表示在后台启动容器，并返回容器ID</li><li><code>mysql:8.1.0</code>是我们指定的镜像</li></ul><p>docker run命令的详细介绍可以使用<code>docker run --help</code>命令查看。</p><p>如果镜像在本地不存在，会先从 docker hub拉取镜像到本地，然后基于镜像启动容器。</p><p><img src="/../images/image-20230819230848131.png" alt="image-20230819230848131"></p><p>然后就可以使用<code>docker images</code>查看拉取的镜像：</p><p><img src="/../images/image-20230819212453893.png" alt="image-20230819212453893"></p><p>使用<code>docker ps</code>查看已启动的容器：</p><p><img src="/../images/image-20230819230806609.png" alt="image-20230819230806609"></p><p>如果我们想要使用命令行连接到启动的mysql，一种方式是使用客户端（比如 navicat、datagrip）来连接，另一种方式是使用命令行来连接。首先进入到容器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql8.1 bash<br></code></pre></td></tr></table></figure><p>然后使用如下命令登录mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>然后根据提示输入密码即可。</p><p>如果要退出 mysql 使用 <code>exit</code> 即可，退出容器的话也是<code>exit</code>。</p><p>mysql 启动的时候使用-d参数指定了在后台启动，如果要看日志的话执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs mysql8.1<br></code></pre></td></tr></table></figure><p>最后不再使用的时候可以使用<code>docker stop [container-id | container-name]</code>停止容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop mysql8.1<br></code></pre></td></tr></table></figure><p>删除容器的话可以使用<code>docker rm [container-id | container-name]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> mysql8.1<br></code></pre></td></tr></table></figure><p>如果要永久删除镜像的话可以使用<code>docker rmi [image:tag | image-id]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi mysql:8.1.0<br></code></pre></td></tr></table></figure><h3 id="使用自定义配置启动mysql"><a href="#使用自定义配置启动mysql" class="headerlink" title="使用自定义配置启动mysql"></a>使用自定义配置启动mysql</h3><p>MySQL的默认配置文件是<code>/etc/mysql/my.cnf</code>文件，如果想要自定义配置，可以参考：<a href="https://dev.mysql.com/doc/refman/8.1/en/server-system-variables.html%E3%80%82">https://dev.mysql.com/doc/refman/8.1/en/server-system-variables.html。</a></p><p>当然可以在容器启动的时候指定新的<code>cnf</code>文件来覆盖默认配置文件。</p><p>在<code>~/env</code>路径下创建配置文件<code>mysql.cnf</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># For advice on how to change settings please see</span><br><span class="hljs-comment"># http://dev.mysql.com/doc/refman/8.1/en/server-configuration-defaults.html</span><br><br><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="hljs-comment"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="hljs-comment"># innodb_buffer_pool_size = 128M</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="hljs-comment"># changes to the binary log between backups.</span><br><span class="hljs-comment"># log_bin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="hljs-comment"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="hljs-comment"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="hljs-comment"># join_buffer_size = 128M</span><br><span class="hljs-comment"># sort_buffer_size = 2M</span><br><span class="hljs-comment"># read_rnd_buffer_size = 2M</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Remove leading # to revert to previous value for default_authentication_plugin,</span><br><span class="hljs-comment"># this will increase compatibility with older clients. For background, see:</span><br><span class="hljs-comment"># https://dev.mysql.com/doc/refman/8.1/en/server-system-variables.html#sysvar_default_authentication_plugin</span><br><span class="hljs-comment"># default-authentication-plugin=mysql_native_password</span><br><span class="hljs-attr">skip-host-cache</span><br><span class="hljs-attr">skip-name-resolve</span><br><span class="hljs-attr">datadir</span>=<span class="hljs-string">/var/lib/mysql</span><br><span class="hljs-attr">socket</span>=<span class="hljs-string">/var/run/mysqld/mysqld.sock</span><br><span class="hljs-attr">secure-file-priv</span>=<span class="hljs-string">/var/lib/mysql-files</span><br><span class="hljs-attr">user</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">pid-file</span>=<span class="hljs-string">/var/run/mysqld/mysqld.pid</span><br><span class="hljs-attr">[client]</span><br><span class="hljs-attr">socket</span>=<span class="hljs-string">/var/run/mysqld/mysqld.sock</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">!includedir /etc/mysql/conf.d/</span><br></code></pre></td></tr></table></figure><p>使用配置文件启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql8.1 \<br>-p 3306:3306 \<br>-v ~/env:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=password \<br>-d mysql:8.1.0<br></code></pre></td></tr></table></figure><p>其中<code>-v ~/env/mysql.cnf:/etc/mysql/conf.d/mysql.cnf</code>指定将主机的配置文件挂载到容器的<code>/etc/mysql/conf.d</code>路径下，这样容器启动的时候将会组合<code>/etc/mysql/my.cnf</code>和<code>/etc/mysql/conf.d/mysql.cnf</code>两个配置文件。</p><p>如果只有少数几个配置项需要覆盖，也可以在启动容器的命令中以<code>--key=value</code>的形式指定，这样就不用使用cnf文件了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql8.1 \<br>-p 3306:3306 \<br>-e MYSQL_ROOT_PASSWORD=password \<br>-d mysql:8.1.0 \<br>--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><h3 id="配置-mysql-的数据存储位置"><a href="#配置-mysql-的数据存储位置" class="headerlink" title="配置 mysql 的数据存储位置"></a>配置 mysql 的数据存储位置</h3><p>在 docker 中运行的 mysql 的数据存放在哪里呢？在容器中存放在<code>/var/lib/mysql</code>路径下，对应到主机上在什么路径下呢？</p><p>默认情况下，Docker将数据库文件写入主机上的磁盘来管理数据库数据，这样带来的缺点是：在主机系统上运行的应用程序很难找到这些文件。</p><p>我们可以在主机上创建一个数据目录，并将其挂载到容器内部的<code>/var/lib/mysql</code>路径。</p><p>首先在主机上创建一个数据目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> home<br><span class="hljs-built_in">mkdir</span> /mysql8/data<br></code></pre></td></tr></table></figure><p>然后在容器启动的时候进行挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql8.1 \<br>-p 3306:3306 \<br>-v /home/mysql8/data:/var/lib/mysql \<br>-v /home/mysql8/config:/etc/mysql/conf.d  \<br>-v /home/mysql8/logs:/logs \<br>-e MYSQL_ROOT_PASSWORD=password \<br>-d mysql:8.1.0<br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></li><li><a href="https://www.runoob.com/docker/docker-install-mysql.html">https://www.runoob.com/docker/docker-install-mysql.html</a></li><li><a href="https://dev.mysql.com/doc/mysql-installer/en/">https://dev.mysql.com/doc/mysql-installer/en/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
